{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMyuojaNkFEexqsWS1+ZHv/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alexol1709/-007-E2024-INT.ARTIFICIALY-REDES-NEURONALES/blob/main/Actividad%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Actividad 2:Diseño de algoritmos en Python\n",
        "Alejandro Olivares Juarez\n",
        "1974980\n",
        "N1"
      ],
      "metadata": {
        "id": "B6zXRLBxM0g6"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eWH2PXWFBfdm"
      },
      "outputs": [],
      "source": [
        "# Solicitar al usuario que ingrese su nombre\n",
        "nombre = input(\"Ingrese su nombre: \")\n",
        "# Verificar si el nombre está en la lista de excluidos\n",
        "if nombre.lower() in [\"ana\", \"juan\", \"pedro\"]:\n",
        "   print(\"Lo siento, no se acepta ese nombre.\")\n",
        "else:\n",
        "   print(f\"Bienvenido/a, {nombre}!\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def invertir_lista():\n",
        "   n = int(input(\"Ingrese la cantidad de elementos en la lista: \"))\n",
        "   lista = []\n",
        "   for i in range(n):\n",
        "       elemento = input(f\"Ingrese el elemento {i + 1}: \")\n",
        "       lista.append(elemento)\n",
        "   lista_invertida = lista[::-1]\n",
        "   return lista_invertida\n",
        "resultado = invertir_lista()\n",
        "print(\"Lista invertida:\", resultado)"
      ],
      "metadata": {
        "id": "PqH3ORrXE6KQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def fibonacci(n):\n",
        "   fib_series = [0, 1]\n",
        "   for i in range(2, n):\n",
        "       fib_series.append(fib_series[i - 1] + fib_series[i - 2])\n",
        "   return fib_series\n",
        "cantidad_numeros = int(input(\"Ingrese la cantidad de números de la serie de Fibonacci que desea generar: \"))\n",
        "resultado = fibonacci(cantidad_numeros)\n",
        "print(\"Serie de Fibonacci:\", resultado)"
      ],
      "metadata": {
        "id": "aSxuNgT3tuuG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "def juego_adivinar_numero():\n",
        "   numero_objetivo = random.randint(1, 100)\n",
        "   intentos = 0\n",
        "   while True:\n",
        "       intento_usuario = int(input(\"Adivina el número (entre 1 y 100): \"))\n",
        "       intentos += 1\n",
        "       if intento_usuario == numero_objetivo:\n",
        "           print(f\"Felicidades, ¡adivinaste el número {numero_objetivo} en {intentos} intentos!\")\n",
        "           break\n",
        "       elif intento_usuario < numero_objetivo:\n",
        "           print(\"El número es mayor. Intenta de nuevo.\")\n",
        "       else:\n",
        "           print(\"El número es menor. Intenta de nuevo.\")\n",
        "juego_adivinar_numero()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 333
        },
        "id": "4YgPZg0bt27u",
        "outputId": "4f6bf1a1-1db3-48ef-fba2-3ac3254ebd51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-5e65dc78e4a5>\u001b[0m in \u001b[0;36m<cell line: 15>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m        \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m            \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"El número es menor. Intenta de nuevo.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mjuego_adivinar_numero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-6-5e65dc78e4a5>\u001b[0m in \u001b[0;36mjuego_adivinar_numero\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m    \u001b[0mintentos\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m    \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m        \u001b[0mintento_usuario\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Adivina el número (entre 1 y 100): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m        \u001b[0mintentos\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m        \u001b[0;32mif\u001b[0m \u001b[0mintento_usuario\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mnumero_objetivo\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def es_primo(num):\n",
        "   if num < 2:\n",
        "       return False\n",
        "   for i in range(2, int(num**0.5) + 1):\n",
        "       if num % i == 0:\n",
        "           return False\n",
        "   return True\n",
        "def numeros_primos_en_rango():\n",
        "   inicio = int(input(\"Ingrese el número inicial del rango: \"))\n",
        "   fin = int(input(\"Ingrese el número final del rango: \"))\n",
        "   print(f\"Números primos en el rango de {inicio} a {fin}:\")\n",
        "   for numero in range(inicio, fin + 1):\n",
        "       if es_primo(numero):\n",
        "           print(numero)\n",
        "numeros_primos_en_rango()"
      ],
      "metadata": {
        "id": "ZEPIYTjfvd4R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def suma(a, b):\n",
        "   return a + b\n",
        "def resta(a, b):\n",
        "   return a - b\n",
        "def multiplicacion(a, b):\n",
        "   return a * b\n",
        "def division(a, b):\n",
        "   if b != 0:\n",
        "       return a / b\n",
        "   else:\n",
        "       return \"Error: No se puede dividir por cero.\"\n",
        "# Solicitar al usuario dos números\n",
        "numero1 = float(input(\"Ingrese el primer número: \"))\n",
        "numero2 = float(input(\"Ingrese el segundo número: \"))\n",
        "# Realizar operaciones básicas\n",
        "resultado_suma = suma(numero1, numero2)\n",
        "resultado_resta = resta(numero1, numero2)\n",
        "resultado_multiplicacion = multiplicacion(numero1, numero2)\n",
        "resultado_division = division(numero1, numero2)\n",
        "# Mostrar resultados\n",
        "print(f\"Suma: {resultado_suma}\")\n",
        "print(f\"Resta: {resultado_resta}\")\n",
        "print(f\"Multiplicación: {resultado_multiplicacion}\")\n",
        "print(f\"División: {resultado_division}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CLHhNLlQvhvB",
        "outputId": "326a5591-e33d-4a72-f7fa-dc42a2327703"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el primer número: 1\n",
            "Ingrese el segundo número: 1\n",
            "Suma: 2.0\n",
            "Resta: 0.0\n",
            "Multiplicación: 1.0\n",
            "División: 1.0\n"
          ]
        }
      ]
    }
  ]
}