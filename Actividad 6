{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNqRE3rIALQe3dDO92rMbnS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alexol1709/-007-E2024-INT.ARTIFICIALY-REDES-NEURONALES/blob/main/Actividad%206\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZPkdfD0zEGvK",
        "outputId": "8194b8c3-6fdf-4527-c08f-7aba586626ba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "750/750 [==============================] - 41s 53ms/step - loss: 0.2095 - accuracy: 0.9373 - val_loss: 0.0640 - val_accuracy: 0.9808\n",
            "Epoch 2/10\n",
            "750/750 [==============================] - 39s 53ms/step - loss: 0.0557 - accuracy: 0.9821 - val_loss: 0.0560 - val_accuracy: 0.9833\n",
            "Epoch 3/10\n",
            "750/750 [==============================] - 40s 53ms/step - loss: 0.0392 - accuracy: 0.9875 - val_loss: 0.0514 - val_accuracy: 0.9840\n",
            "Epoch 4/10\n",
            "750/750 [==============================] - 43s 57ms/step - loss: 0.0293 - accuracy: 0.9909 - val_loss: 0.0525 - val_accuracy: 0.9849\n",
            "Epoch 5/10\n",
            "750/750 [==============================] - 38s 51ms/step - loss: 0.0254 - accuracy: 0.9917 - val_loss: 0.0447 - val_accuracy: 0.9869\n",
            "Epoch 6/10\n",
            "519/750 [===================>..........] - ETA: 10s - loss: 0.0198 - accuracy: 0.9936"
          ]
        }
      ],
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models\n",
        "from tensorflow.keras.datasets import mnist\n",
        "\n",
        "\n",
        "(train_data, train_labels), (test_data, test_labels) = mnist.load_data()\n",
        "\n",
        "\n",
        "train_data = train_data.astype('float32') / 255.0\n",
        "test_data = test_data.astype('float32') / 255.0\n",
        "\n",
        "\n",
        "train_data = np.expand_dims(train_data, -1)\n",
        "test_data = np.expand_dims(test_data, -1)\n",
        "\n",
        "train_labels = tf.keras.utils.to_categorical(train_labels, 10)\n",
        "test_labels = tf.keras.utils.to_categorical(test_labels, 10)\n",
        "\n",
        "\n",
        "model = models.Sequential([\n",
        "    layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),\n",
        "    layers.MaxPooling2D(pool_size=(2, 2)),\n",
        "    layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),\n",
        "    layers.MaxPooling2D(pool_size=(2, 2)),\n",
        "    layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(64, activation='relu'),\n",
        "    layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "history = model.fit(train_data, train_labels, epochs=10, batch_size=64, validation_split=0.2)\n",
        "\n",
        "test_loss, test_acc = model.evaluate(test_data, test_labels, verbose=2)\n",
        "print(f'\\nExactitud en el conjunto de prueba: {test_acc}')\n",
        "\n",
        "\n",
        "predictions = model.predict(test_data)\n",
        "\n",
        "for i in range(5):\n",
        "    plt.imshow(test_data[i].reshape(28, 28), cmap='gray')\n",
        "    plt.title(f'Predicci√≥n: {np.argmax(predictions[i])}, Valor real: {np.argmax(test_labels[i])}')\n",
        "    plt.show()"
      ]
    }
  ]
}